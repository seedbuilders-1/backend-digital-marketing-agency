generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Renamed to PascalCase for consistency
model User {
  id                         String    @id @default(uuid()) @db.Char(36)
  name                       String    @db.VarChar(100)
  email                      String    @unique(map: "email") @db.VarChar(255)
  tel                        String    @unique(map: "tel") @db.VarChar(20)
  country                    String    @db.VarChar(64)
  city                       String?   @db.VarChar(64)
  address                    String    @db.Text
  category                   String    @db.VarChar(15)
  pfp_url                    String?   @db.Text
  id_url                     Json?
  business_status            Boolean?
  registered_with_a_business Boolean?
  password                   String    @db.Text
  status                     String    @default("unverified") @db.VarChar(10)
  role_id                    String    @db.Char(36)
  created_at                 DateTime? @default(now()) @db.Timestamp(0)
  deleted_at                 DateTime? @db.Timestamp(0)
  messages                   Message[] 

  // Corrected relations
  notifications         Notification[]
  notification_settings Notification_settings[]
  organisation         Organisation?
  otps                  Otp[]
  password_tokens       Password_token[]
  privacy_settings      Privacy_settings[]
  created_roles         Role[]                  @relation("RoleCreator")
  services              Service[]
  service_requests      ServiceRequest[]
  subscriptions         Subscription[]
  testimonials          Testimonial[]
  plan_types            Plan_type[]
  role                  Role                    @relation("UserRole", fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Invoice               Invoice[]

  @@index([role_id], map: "user_role_id_fkey")
}

model Organisation {
  id          String      @id @default(uuid()) @db.Char(36)
  name        String      @db.VarChar(100)
  email       String      @unique(map: "email") @db.VarChar(255)
  address     String      @db.Text
  country     String      @db.VarChar(64)
  industry    String      @db.Text
  logo_url    String      @db.Text
  rc_number   String      @unique(map: "rc_number") @db.VarChar(20)
  staff_size  String      @db.VarChar(15)
  type        String      @db.VarChar(50)

  // --- NEW REQUIRED DOCUMENT FIELDS ---
  cert_of_inc_url             String   @db.Text // Certificate of Incorporation
  mem_of_assoc_url            String   @db.Text // Memorandum of Association
  proof_of_address_url        String   @db.Text // Proof of Business Address
  company_status_report_url   String   @db.Text // Company Status Report

  created_at  DateTime    @default(now()) @db.Timestamp(0)
  user_id     String      @unique @db.Char(36)
  deleted_at  DateTime?   @db.Timestamp(0)
  
  // --- RELATIONS ---
  caseStudies CaseStudy[]
  contacts    Contact[]
  user        User        @relation(fields: [user_id], references: [id])
}

model Service {
  id                 String           @id @default(uuid()) @db.Char(36)
  title              String           @db.VarChar(255)
  isPublic           Boolean          @default(true)
  heroHeadline       String?          @db.Text
  heroParagraph      String?          @db.Text
  heroImageUrl       String?          @db.Text
  blueprintHeadline  String?          @db.Text
  blueprintParagraph String?          @db.Text
  blueprintImageUrl  String?          @db.Text
  bannerText         String?          @db.Text
  admin_id           String           @db.Char(36)
  created_at         DateTime?        @default(now()) @db.Timestamp(0)
  deleted_at         DateTime?        @db.Timestamp(0)
  plans              Plan[]
  caseStudies        CaseStudy[]
  testimonials       Testimonial[]
  faqs               Faq[]
  service_requests   ServiceRequest[] // Corrected
  user               User             @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  form ServiceForm?
}

model ServiceForm {
  id         String    @id @default(uuid())
  service    Service   @relation(fields: [service_id], references: [id])
  service_id String    @unique // Each service has only one form definition
  formFields Json // Stores the JSON array of form field definitions
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model Plan {
  id               String           @id @default(uuid()) @db.Char(36)
  name             String           @db.VarChar(100)
  price            String
  priceUnit        String           @db.VarChar(20)
  audience         String           @db.VarChar(100)
  features         Json
  service_id       String           @db.Char(36)
  service          Service          @relation(fields: [service_id], references: [id], onDelete: Cascade)
  // Corrected relations
  service_requests ServiceRequest[]
  position         Int              @default(0)
  subscriptions    Subscription[]
  Plan_type        Plan_type?       @relation(fields: [plan_typeId], references: [id])
  plan_typeId      String?          @db.Char(36)
  Billing_cycle    Billing_cycle?   @relation(fields: [billing_cycleId], references: [id])
  billing_cycleId  String?          @db.Char(36)

  @@index([service_id])
}

model Invoice {
  id                 String          @id @default(uuid())
  user               User            @relation(fields: [user_id], references: [id])
  user_id            String
  service_request    ServiceRequest? @relation(fields: [service_request_id], references: [id])
  service_request_id String?         @unique // An invoice is for one request
  amount             Decimal         @db.Decimal(10, 2)
  status             String // "Unpaid", "Paid", "Overdue"
  due_date           DateTime
  paid_at            DateTime?
  payment_method     String?   // e.g., "Paystack", "Stripe"
  payment_reference  String?   @unique 
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
}

model CaseStudy {
  id                String        @id @default(uuid()) @db.Char(36)
  title             String        @db.VarChar(255)
  subtitle          String        @db.VarChar(255)
  bannerImageUrl    String?       @db.Text
  challenge         String?       @db.Text
  challengeImageUrl String?       @db.Text
  solution          String?       @db.Text
  solutionImageUrl  String?       @db.Text
  result            String?       @db.Text
  resultImageUrl    String?       @db.Text
  service_id        String        @db.Char(36)
  service           Service       @relation(fields: [service_id], references: [id], onDelete: Cascade)
  Organisation      Organisation? @relation(fields: [organisationId], references: [id])
  organisationId    String?       @db.Char(36)

  @@index([service_id])
}

model Testimonial {
  id             String  @id @default(uuid()) @db.Char(36)
  quote          String  @db.Text
  authorName     String  @db.VarChar(100)
  authorTitle    String  @db.VarChar(100)
  stars          Int     @default(5)
  authorImageUrl String? @db.Text
  service_id     String  @db.Char(36)
  service        Service @relation(fields: [service_id], references: [id], onDelete: Cascade)
  user_id        String  @db.Char(36)
  user           User    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Faq {
  id         String  @id @default(uuid()) @db.Char(36)
  question   String  @db.Text
  answer     String  @db.Text
  service_id String  @db.Char(36)
  service    Service @relation(fields: [service_id], references: [id], onDelete: Cascade)

  @@index([service_id])
}

enum ServiceRequestStatus {
  PENDING_APPROVAL // A new request that the admin needs to review
  ACTIVE // Admin has accepted and is working on it
  COMPLETED // The project is finished
  DECLINED // Admin has declined the request
  CANCELLED // Client has cancelled
}

enum MilestoneStatus {
  PENDING_ADMIN_UPLOAD    // Default: Waiting for the admin to upload the first deliverable.
  PENDING_CLIENT_APPROVAL // Admin has uploaded, waiting for the client to review.
  APPROVED                // Client has approved the deliverable.
  REJECTED                // Client has rejected the deliverable.
}

model ServiceRequest {
  id         String  @id @default(uuid())
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String
  service    Service @relation(fields: [service_id], references: [id])
  service_id String
  plan_name  String

  // --- NEW & UPDATED FIELDS ---
  status     ServiceRequestStatus @default(PENDING_APPROVAL) // Use the enum
  start_date DateTime?  // Client provides this
  end_date   DateTime? // Client provides this

  formData   Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  invoice    Invoice?
  milestones Milestone[] // A request can have many milestones
  Plan       Plan?       @relation(fields: [planId], references: [id])
  planId     String?     @db.Char(36)
  conversation Conversation?
}

model Milestone {
  id                 String         @id @default(uuid())
  service_request    ServiceRequest @relation(fields: [service_request_id], references: [id])
  service_request_id String
  title              String // e.g., "Initial Design Mockup"
  deadline           DateTime
  deliverable_file_url    String?        // Will store the Cloudinary URL for the uploaded file
  deliverable_file_name   String?        // Will store the original filename
  deliverable_link_url    String? 
  status             MilestoneStatus @default(PENDING_ADMIN_UPLOAD)
  rejection_reason   String?         // Stores the client's reason fo
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
}

// Renamed to PascalCase
model Contact {
  id              String       @id @default(uuid()) @db.Char(36)
  name            String       @db.VarChar(100)
  pfp_url         String       @db.Text
  organisation_id String       @db.Char(36)
  id_url          Json
  created_at      DateTime?    @default(now()) @db.Timestamp(0)
  deleted_at      DateTime?    @db.Timestamp(0)
  organisation    Organisation @relation(fields: [organisation_id], references: [id])
}

// Renamed to PascalCase
model Otp {
  id         String    @id @default(uuid()) @db.Char(36)
  otp        String    @db.Text
  expires_at DateTime? @db.Timestamp(0)
  created_at DateTime? @default(now()) @db.Timestamp(0)
  user_id    String    @db.Char(36)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Conversation {
  id                 String         @id @default(uuid())
  service_request    ServiceRequest @relation(fields: [service_request_id], references: [id])
  service_request_id String         @unique // Enforces one conversation per service request
  messages           Message[]
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
}

model Message {
  id               String       @id @default(uuid())
  conversation     Conversation @relation(fields: [conversation_id], references: [id])
  conversation_id  String
  sender           User         @relation(fields: [sender_id], references: [id])
  sender_id        String
  text             String       @db.Text
  created_at       DateTime     @default(now())
}


// Renamed to PascalCase
model Password_token {
  id         String    @id @default(uuid()) @db.Char(36)
  token      String    @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
  expires_at DateTime? @db.Timestamp(0)
  user_id    String    @db.Char(36)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// Renamed to PascalCase
model Notification {
  id           String    @id @default(uuid()) @db.Char(36)
  activity     String    @db.Text
  completed_at DateTime? @default(now()) @db.Timestamp(0)
  user_id      String    @db.Char(36)
  user         User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Renamed to PascalCase
model Privacy_settings {
  id               String  @id @default(uuid()) @db.Char(36)
  ads              Boolean @default(true)
  data_sharing     Boolean @default(true)
  marketing_status Boolean @default(true)
  activity_status  Boolean @default(true)
  user_id          String  @db.Char(36)
  user             User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// Renamed to PascalCase
model Notification_settings {
  id             String  @id @default(uuid()) @db.Char(36)
  alerts         Boolean @default(true)
  messages       Boolean @default(true)
  updates        Boolean @default(true)
  billing_alerts Boolean @default(true)
  email          Boolean @default(true)
  in_app         Boolean @default(true)
  user_id        String  @db.Char(36)
  user           User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// Renamed to PascalCase
model Plan_type {
  id         String    @id @default(uuid()) @db.Char(36)
  name       String    @db.VarChar(20)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  created_by String    @db.Char(36)
  deleted_at DateTime? @db.Timestamp(0)
  user       User      @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  plans      Plan[]

  @@index([created_by])
}

// Renamed to PascalCase
model Billing_cycle {
  id               String    @id @default(uuid()) @db.Char(36)
  name             String    @db.VarChar(20)
  duration_in_days Int       @db.Int
  created_at       DateTime  @default(now()) @db.Timestamp(0)
  deleted_at       DateTime? @db.Timestamp(0)
  plans            Plan[]
}

// Renamed to PascalCase
model Subscription {
  id         String    @id @default(uuid()) @db.Char(36)
  start_date DateTime? @default(now()) @db.Timestamp(0)
  end_date   DateTime? @db.Timestamp(0)
  status     String    @db.VarChar(20)
  user_id    String    @db.Char(36)
  plan_id    String    @db.Char(36)
  plan       Plan      @relation(fields: [plan_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([plan_id])
}

// Renamed to PascalCase
model Role {
  id          String    @id @default(uuid()) @db.Char(36)
  title       String    @unique
  description String?   @db.Text
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  created_by  String?   @db.Char(36)
  deleted_at  DateTime? @db.Timestamp(0)
  creator     User?     @relation("RoleCreator", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       User[]    @relation("UserRole")

  @@index([created_by])
}
