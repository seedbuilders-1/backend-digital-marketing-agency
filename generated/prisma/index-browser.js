
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  tel: 'tel',
  country: 'country',
  consistency: 'consistency',
  address: 'address',
  category: 'category',
  pfp_url: 'pfp_url',
  id_url: 'id_url',
  business_status: 'business_status',
  registered_with_a_business: 'registered_with_a_business',
  password: 'password',
  status: 'status',
  role_id: 'role_id',
  created_at: 'created_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.OrganisationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  address: 'address',
  country: 'country',
  industry: 'industry',
  logo_url: 'logo_url',
  rc_number: 'rc_number',
  staff_size: 'staff_size',
  type: 'type',
  cert_of_inc_url: 'cert_of_inc_url',
  mem_of_assoc_url: 'mem_of_assoc_url',
  proof_of_address_url: 'proof_of_address_url',
  company_status_report_url: 'company_status_report_url',
  created_at: 'created_at',
  user_id: 'user_id',
  deleted_at: 'deleted_at'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  isPublic: 'isPublic',
  heroHeadline: 'heroHeadline',
  heroParagraph: 'heroParagraph',
  heroImageUrl: 'heroImageUrl',
  blueprintHeadline: 'blueprintHeadline',
  blueprintParagraph: 'blueprintParagraph',
  blueprintImageUrl: 'blueprintImageUrl',
  bannerText: 'bannerText',
  admin_id: 'admin_id',
  created_at: 'created_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.ServiceFormScalarFieldEnum = {
  id: 'id',
  service_id: 'service_id',
  formFields: 'formFields',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  priceUnit: 'priceUnit',
  audience: 'audience',
  features: 'features',
  service_id: 'service_id',
  plan_typeId: 'plan_typeId',
  billing_cycleId: 'billing_cycleId'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  service_request_id: 'service_request_id',
  amount: 'amount',
  status: 'status',
  due_date: 'due_date',
  paid_at: 'paid_at',
  payment_method: 'payment_method',
  payment_reference: 'payment_reference',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CaseStudyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  bannerImageUrl: 'bannerImageUrl',
  challenge: 'challenge',
  challengeImageUrl: 'challengeImageUrl',
  solution: 'solution',
  solutionImageUrl: 'solutionImageUrl',
  result: 'result',
  resultImageUrl: 'resultImageUrl',
  service_id: 'service_id',
  organisationId: 'organisationId'
};

exports.Prisma.TestimonialScalarFieldEnum = {
  id: 'id',
  quote: 'quote',
  authorName: 'authorName',
  authorTitle: 'authorTitle',
  stars: 'stars',
  authorImageUrl: 'authorImageUrl',
  service_id: 'service_id',
  user_id: 'user_id'
};

exports.Prisma.FaqScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  service_id: 'service_id'
};

exports.Prisma.ServiceRequestScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  service_id: 'service_id',
  plan_name: 'plan_name',
  status: 'status',
  start_date: 'start_date',
  end_date: 'end_date',
  formData: 'formData',
  created_at: 'created_at',
  updated_at: 'updated_at',
  planId: 'planId'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  service_request_id: 'service_request_id',
  title: 'title',
  deadline: 'deadline',
  deliverable_url: 'deliverable_url',
  deliverable_name: 'deliverable_name',
  status: 'status',
  rejection_reason: 'rejection_reason',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  pfp_url: 'pfp_url',
  organisation_id: 'organisation_id',
  id_url: 'id_url',
  created_at: 'created_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  otp: 'otp',
  expires_at: 'expires_at',
  created_at: 'created_at',
  user_id: 'user_id'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  service_request_id: 'service_request_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  sender_id: 'sender_id',
  text: 'text',
  created_at: 'created_at'
};

exports.Prisma.Password_tokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  created_at: 'created_at',
  expires_at: 'expires_at',
  user_id: 'user_id'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  activity: 'activity',
  completed_at: 'completed_at',
  user_id: 'user_id'
};

exports.Prisma.Privacy_settingsScalarFieldEnum = {
  id: 'id',
  ads: 'ads',
  data_sharing: 'data_sharing',
  marketing_status: 'marketing_status',
  activity_status: 'activity_status',
  user_id: 'user_id'
};

exports.Prisma.Notification_settingsScalarFieldEnum = {
  id: 'id',
  alerts: 'alerts',
  messages: 'messages',
  updates: 'updates',
  billing_alerts: 'billing_alerts',
  email: 'email',
  in_app: 'in_app',
  user_id: 'user_id'
};

exports.Prisma.Plan_typeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  created_by: 'created_by',
  deleted_at: 'deleted_at'
};

exports.Prisma.Billing_cycleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  duration_in_days: 'duration_in_days',
  created_at: 'created_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  start_date: 'start_date',
  end_date: 'end_date',
  status: 'status',
  user_id: 'user_id',
  plan_id: 'plan_id'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  created_at: 'created_at',
  created_by: 'created_by',
  deleted_at: 'deleted_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  tel: 'tel',
  country: 'country',
  consistency: 'consistency',
  address: 'address',
  category: 'category',
  pfp_url: 'pfp_url',
  password: 'password',
  status: 'status',
  role_id: 'role_id'
};

exports.Prisma.OrganisationOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  address: 'address',
  country: 'country',
  industry: 'industry',
  logo_url: 'logo_url',
  rc_number: 'rc_number',
  staff_size: 'staff_size',
  type: 'type',
  cert_of_inc_url: 'cert_of_inc_url',
  mem_of_assoc_url: 'mem_of_assoc_url',
  proof_of_address_url: 'proof_of_address_url',
  company_status_report_url: 'company_status_report_url',
  user_id: 'user_id'
};

exports.Prisma.ServiceOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  heroHeadline: 'heroHeadline',
  heroParagraph: 'heroParagraph',
  heroImageUrl: 'heroImageUrl',
  blueprintHeadline: 'blueprintHeadline',
  blueprintParagraph: 'blueprintParagraph',
  blueprintImageUrl: 'blueprintImageUrl',
  bannerText: 'bannerText',
  admin_id: 'admin_id'
};

exports.Prisma.ServiceFormOrderByRelevanceFieldEnum = {
  id: 'id',
  service_id: 'service_id'
};

exports.Prisma.PlanOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  priceUnit: 'priceUnit',
  audience: 'audience',
  service_id: 'service_id',
  plan_typeId: 'plan_typeId',
  billing_cycleId: 'billing_cycleId'
};

exports.Prisma.InvoiceOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  service_request_id: 'service_request_id',
  status: 'status',
  payment_method: 'payment_method',
  payment_reference: 'payment_reference'
};

exports.Prisma.CaseStudyOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  bannerImageUrl: 'bannerImageUrl',
  challenge: 'challenge',
  challengeImageUrl: 'challengeImageUrl',
  solution: 'solution',
  solutionImageUrl: 'solutionImageUrl',
  result: 'result',
  resultImageUrl: 'resultImageUrl',
  service_id: 'service_id',
  organisationId: 'organisationId'
};

exports.Prisma.TestimonialOrderByRelevanceFieldEnum = {
  id: 'id',
  quote: 'quote',
  authorName: 'authorName',
  authorTitle: 'authorTitle',
  authorImageUrl: 'authorImageUrl',
  service_id: 'service_id',
  user_id: 'user_id'
};

exports.Prisma.FaqOrderByRelevanceFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  service_id: 'service_id'
};

exports.Prisma.ServiceRequestOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  service_id: 'service_id',
  plan_name: 'plan_name',
  planId: 'planId'
};

exports.Prisma.MilestoneOrderByRelevanceFieldEnum = {
  id: 'id',
  service_request_id: 'service_request_id',
  title: 'title',
  deliverable_url: 'deliverable_url',
  deliverable_name: 'deliverable_name',
  rejection_reason: 'rejection_reason'
};

exports.Prisma.ContactOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  pfp_url: 'pfp_url',
  organisation_id: 'organisation_id'
};

exports.Prisma.OtpOrderByRelevanceFieldEnum = {
  id: 'id',
  otp: 'otp',
  user_id: 'user_id'
};

exports.Prisma.ConversationOrderByRelevanceFieldEnum = {
  id: 'id',
  service_request_id: 'service_request_id'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  sender_id: 'sender_id',
  text: 'text'
};

exports.Prisma.Password_tokenOrderByRelevanceFieldEnum = {
  id: 'id',
  token: 'token',
  user_id: 'user_id'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  id: 'id',
  activity: 'activity',
  user_id: 'user_id'
};

exports.Prisma.Privacy_settingsOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id'
};

exports.Prisma.Notification_settingsOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id'
};

exports.Prisma.Plan_typeOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  created_by: 'created_by'
};

exports.Prisma.Billing_cycleOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SubscriptionOrderByRelevanceFieldEnum = {
  id: 'id',
  status: 'status',
  user_id: 'user_id',
  plan_id: 'plan_id'
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  created_by: 'created_by'
};
exports.ServiceRequestStatus = exports.$Enums.ServiceRequestStatus = {
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DECLINED: 'DECLINED',
  CANCELLED: 'CANCELLED'
};

exports.MilestoneStatus = exports.$Enums.MilestoneStatus = {
  PENDING_ADMIN_UPLOAD: 'PENDING_ADMIN_UPLOAD',
  PENDING_CLIENT_APPROVAL: 'PENDING_CLIENT_APPROVAL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Organisation: 'Organisation',
  Service: 'Service',
  ServiceForm: 'ServiceForm',
  Plan: 'Plan',
  Invoice: 'Invoice',
  CaseStudy: 'CaseStudy',
  Testimonial: 'Testimonial',
  Faq: 'Faq',
  ServiceRequest: 'ServiceRequest',
  Milestone: 'Milestone',
  Contact: 'Contact',
  Otp: 'Otp',
  Conversation: 'Conversation',
  Message: 'Message',
  Password_token: 'Password_token',
  Notification: 'Notification',
  Privacy_settings: 'Privacy_settings',
  Notification_settings: 'Notification_settings',
  Plan_type: 'Plan_type',
  Billing_cycle: 'Billing_cycle',
  Subscription: 'Subscription',
  Role: 'Role'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
